import { NextResponse } from "next/server"
import { getCurrentUser } from "@/lib/supabase/server"
import { getZones, createZone } from "@/lib/services/zones-service"
import { logger } from "@/lib/logger"
import type { User } from "@supabase/supabase-js"

function getTenantIdFromUser(user: User): string | undefined {
  // Intentar desde user_metadata primero
  const metadata = user.user_metadata as Record<string, unknown> | undefined
  const tenantId = metadata?.tenant_id

  if (typeof tenantId === 'string') {
    return tenantId
  }

  // Intentar desde el root del objeto user (puede estar ahí en algunos casos)
  const rootTenantId = (user as unknown as Record<string, unknown>).tenant_id
  if (typeof rootTenantId === 'string') {
    return rootTenantId
  }

  // Si no se encuentra, retornar undefined
  // El flujo de autenticación debería actualizar user_metadata
  return undefined
}

export async function GET() {
  const startTime = Date.now()

  try {
    console.log('[GET /api/zones] Iniciando petición...')
    const user = await getCurrentUser()
    if (!user) {
      console.log('[GET /api/zones] ❌ Usuario no autenticado')
      return NextResponse.json({ error: 'No autenticado' }, { status: 401 })
    }

    console.log('[GET /api/zones] ✅ Usuario autenticado:', user.id)
    const tenantId = getTenantIdFromUser(user)
    console.log('[GET /api/zones] tenant_id extraído:', tenantId)
    
    if (!tenantId) {
      console.log('[GET /api/zones] ❌ Usuario sin tenant asignado')
      console.log('[GET /api/zones] user_metadata:', JSON.stringify(user.user_metadata))
      return NextResponse.json({ error: 'Usuario sin tenant asignado' }, { status: 403 })
    }

    console.log('[GET /api/zones] Llamando getZones con tenant_id:', tenantId)
    const { data: zones, error } = await getZones(tenantId)
    
    if (error) {
      console.log('[GET /api/zones] ❌ Error al obtener zonas:', error.message)
      throw error
    }
    
    console.log('[GET /api/zones] ✅ Zonas obtenidas:', zones?.length || 0)

    const duration = Date.now() - startTime
    logger.info('Zonas obtenidas', {
      count: zones?.length || 0,
      duration: `${duration}ms`,
      tenantId,
    })

    return NextResponse.json({ data: zones })
  } catch (error) {
    const duration = Date.now() - startTime
    logger.error('Error al obtener zonas', error as Error, { duration })

    return NextResponse.json(
      { error: 'No se pudieron cargar las zonas' },
      { status: 500 },
    )
  }
}

export async function POST(request: Request) {
  const startTime = Date.now()

  try {
    const user = await getCurrentUser()
    if (!user) {
      return NextResponse.json({ error: 'No autenticado' }, { status: 401 })
    }

    const tenantId = getTenantIdFromUser(user)
    if (!tenantId) {
      return NextResponse.json({ error: 'Usuario sin tenant asignado' }, { status: 403 })
    }

    const body = await request.json().catch(() => ({})) as {
      name?: string
      active?: boolean
    }

    const name = body.name?.trim()
    if (!name) {
      return NextResponse.json({ error: 'El nombre de la zona es obligatorio' }, { status: 400 })
    }

    const { data: zone, error } = await createZone(
      {
        name,
        sortOrder: body.active !== undefined ? 0 : undefined,
      },
      tenantId
    )

    if (error) {
      throw error
    }

    const duration = Date.now() - startTime
    logger.info('Zona creada exitosamente', {
      zoneId: zone?.id,
      name: zone?.name,
      tenantId,
      duration: `${duration}ms`,
    })

    return NextResponse.json({ data: zone }, { status: 201 })
  } catch (error) {
    const duration = Date.now() - startTime
    logger.error('Error al crear zona', error as Error, { duration })

    const message = error instanceof Error ? error.message : 'No se pudo crear la zona'
    return NextResponse.json({ error: message }, { status: 500 })
  }
}

export async function OPTIONS() {
  return NextResponse.json({
    actions: ['GET', 'POST'],
    description: 'Gestion de zonas del restaurante',
  })
}




