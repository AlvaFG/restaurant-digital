/**
 * Script para probar el endpoint /api/auth/me
 * 
 * Este script simula una petici√≥n al endpoint como lo har√≠a el navegador
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import { resolve } from 'path'

// Cargar variables de entorno
dotenv.config({ path: resolve(__dirname, '../.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const EMAIL = 'Afernandezguyot@gmail.com'
const PASSWORD = 'password123' // Asume esta contrase√±a, c√°mbiala si es diferente

async function testAuthMe() {
  console.log('\nüîç ========== PRUEBA DE /api/auth/me ==========\n')

  try {
    // 1. Crear cliente de Supabase
    const supabase = createClient(supabaseUrl, supabaseAnonKey)

    // 2. Hacer login para obtener la sesi√≥n
    console.log('1Ô∏è‚É£ Iniciando sesi√≥n...')
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: EMAIL,
      password: PASSWORD
    })

    if (authError) {
      console.error('‚ùå Error en login:', authError.message)
      console.log('   ‚ÑπÔ∏è  Verifica que la contrase√±a sea correcta')
      return
    }

    console.log('‚úÖ Login exitoso')
    console.log(`   - User ID: ${authData.user.id}`)
    console.log(`   - Session: ${authData.session ? 'V√°lida' : 'No v√°lida'}`)
    console.log(`   - Access Token: ${authData.session?.access_token.substring(0, 20)}...`)

    // 3. Hacer petici√≥n a /api/auth/me (simulando el navegador)
    console.log('\n2Ô∏è‚É£ Haciendo petici√≥n a /api/auth/me...')
    
    const startTime = Date.now()
    
    try {
      const response = await fetch('http://localhost:3000/api/auth/me', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${authData.session?.access_token}`,
          'Content-Type': 'application/json'
        },
        // Timeout de 15 segundos
        signal: AbortSignal.timeout(15000)
      })

      const duration = Date.now() - startTime
      console.log(`‚è±Ô∏è  Tiempo de respuesta: ${duration}ms`)

      if (!response.ok) {
        console.error(`‚ùå Error en respuesta: ${response.status} ${response.statusText}`)
        const errorData = await response.json().catch(() => ({}))
        console.error('   Detalles:', JSON.stringify(errorData, null, 2))
        return
      }

      const data = await response.json()
      
      console.log('\n‚úÖ Respuesta exitosa de /api/auth/me:')
      console.log(JSON.stringify(data, null, 2))

      if (data.data?.user && data.data?.tenant) {
        console.log('\n‚úÖ ========== TODO OK ==========')
        console.log('   ‚úÖ Usuario obtenido correctamente')
        console.log('   ‚úÖ Tenant obtenido correctamente')
        console.log(`   ‚è±Ô∏è  Tiempo de respuesta: ${duration}ms (${duration > 5000 ? '‚ö†Ô∏è LENTO' : '‚úÖ R√ÅPIDO'})`)
      } else {
        console.error('\n‚ùå Respuesta incompleta:')
        console.error('   - hasUser:', !!data.data?.user)
        console.error('   - hasTenant:', !!data.data?.tenant)
      }

    } catch (fetchError: any) {
      const duration = Date.now() - startTime
      if (fetchError.name === 'AbortError' || fetchError.name === 'TimeoutError') {
        console.error(`\n‚ùå TIMEOUT despu√©s de ${duration}ms`)
        console.error('   El endpoint /api/auth/me est√° tardando m√°s de 15 segundos')
        console.error('   Esto podr√≠a ser el problema principal.')
      } else {
        console.error(`\n‚ùå Error al hacer fetch (despu√©s de ${duration}ms):`, fetchError.message)
      }
    }

  } catch (error: any) {
    console.error('\n‚ùå Error cr√≠tico:', error.message)
  }
}

// Ejecutar
console.log('‚ö†Ô∏è  NOTA: Aseg√∫rate de que el servidor est√© corriendo (npm run dev)')
console.log('‚ö†Ô∏è  Si la contrase√±a no es "password123", edita el script\n')

testAuthMe()
